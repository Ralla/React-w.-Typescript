{"ast":null,"code":"var _jsxFileName = \"/Users/jakobkruse/Code/blast/blast/src/App.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// interface MyState {\n//     matchLines: keyof MatchLine;\n// }\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      loading: true,\n      matchLines: [],\n      players: [],\n      rounds: [],\n      score: []\n    };\n    this.calculateStats = () => {\n      console.log('calculateState');\n      this.setState({\n        'loading': false\n      });\n    };\n    this.processMatchLines = data => {\n      //this.setState({'matchLines': data});\n\n      var lines = data.split('\\n');\n\n      // Find last Match_Start.\n      var reversedLines = data.split('\\n').reverse().join('\\n');\n      var matchStartIndex = reversedLines.indexOf('Match_Start'); // => 18\n      var tempString = reversedLines.substring(0, matchStartIndex);\n      var MatchStartLineNumber = tempString.split('\\n').length;\n\n      // Loop through.\n      const matchLines = [];\n      let roundNumber = 0;\n      for (var line = 0; line < lines.length; line++) {\n        let currentLine = lines[line].substring(24);\n        let steamId = this.determineMatchLineSteamId(currentLine);\n        let isPlayer = steamId !== '';\n        let isWarmup = line < MatchStartLineNumber;\n        let type = this.determineMatchLineType(currentLine);\n        ;\n        let team = this.determineMatchLineTeam(currentLine);\n        if (type == 'round_end') {\n          roundNumber++;\n        }\n        let lineObject = {\n          'isPlayer': isPlayer,\n          'isWarmup': isWarmup,\n          'steamId': steamId,\n          'team': team,\n          'type': type,\n          'roundNumber': isWarmup ? 0 : roundNumber,\n          'raw': lines[line]\n        };\n\n        // this.setState((state) => ({\n        //     matchLines: [...state.matchLines, lineObject]\n        // }));\n\n        matchLines.push(lineObject);\n      }\n      this.setState({\n        matchLines: [...this.state.matchLines, ...matchLines]\n      });\n      console.log('process done');\n    };\n    this.determineMatchLineSteamId = line => {\n      let matches = line.match('STEAM_[^>]*');\n      if (!matches) {\n        return '';\n      }\n      var steamId = matches[0];\n\n      // const isKnownPlayer = this.state.players.find((player: any) => {\n      //     return player.steamId === steamId;\n      // });\n      //\n      // if (!isKnownPlayer) {\n      //     let newPlayer: Player = {\n      //         'steamId': steamId\n      //     };\n      //\n      //     this.setState(state => ({\n      //         players: [...state.players, newPlayer]\n      //     }));\n      // }\n\n      return steamId[0];\n    };\n    this.determineMatchLineTeam = line => {\n      if (line.match(/<CT>|<TERRORIST>/)) {\n        return line.includes('<CT>') ? 'CT' : 'T';\n      }\n      return '';\n    };\n    this.determineMatchLineType = line => {\n      if (line.match(/killed|attacked/)) {\n        return 'damage';\n      }\n      if (line.match(/Round_End/)) {\n        return 'round_end';\n      }\n      if (line.match(/Round_Start/)) {\n        return 'round_start';\n      }\n      if (line.match(/SFUI_Notice_Terrorists_Win/)) {\n        return 'round_win_t';\n      }\n      if (line.match(/SFUI_Notice_CTs_Win/)) {\n        return 'round_win_ct';\n      }\n      return 'meta';\n    };\n  }\n  processMatch() {\n    console.log('renderMatch');\n    const file = require(\"./matchdata/match.txt\");\n    fetch(file).then(response => response.text()).then(data => {\n      this.processMatchLines(data);\n    });\n  }\n  componentDidMount() {\n    console.log('componentDidMount');\n    this.processMatch();\n  }\n  componentDidUpdate() {\n    console.log('componentDidUpdate');\n    this.calculateStats();\n  }\n  render() {\n    if (this.state.loading) {\n      return 'Loading...';\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"kk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\nexport default App;","map":{"version":3,"names":["React","App","Component","state","loading","matchLines","players","rounds","score","calculateStats","console","log","setState","processMatchLines","data","lines","split","reversedLines","reverse","join","matchStartIndex","indexOf","tempString","substring","MatchStartLineNumber","length","roundNumber","line","currentLine","steamId","determineMatchLineSteamId","isPlayer","isWarmup","type","determineMatchLineType","team","determineMatchLineTeam","lineObject","push","matches","match","includes","processMatch","file","require","fetch","then","response","text","componentDidMount","componentDidUpdate","render"],"sources":["/Users/jakobkruse/Code/blast/blast/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport internal from \"stream\";\n// https://www.hltv.org/matches/2352820/natus-vincere-vs-vitality-blast-premier-fall-final-2021\n// https://chewedup.blast.tv/6544bb744b36dbf16919bd9b88528887b06a71c7de9e60e5102bba7c1cb9611c.html\n\ninterface MatchLine {\n    isPlayer: boolean;\n    isWarmup: boolean;\n    steamId: string;\n    team: string;\n    type: string;\n    roundNumber: number;\n    raw: string;\n}\n\ninterface Player {\n    steamId: string;\n}\n\ninterface State {\n    loading: boolean;\n    players: Player[];\n    matchLines: MatchLine[];\n}\n// interface MyState {\n//     matchLines: keyof MatchLine;\n// }\n\nclass App extends React.Component <any, State> {\n// class App extends React.Component {\n//     constructor(props: any) {\n//         super(props);\n//\n//         this.state = {\n//             loading: true,\n//             matchLines: ''\n//         };\n//     }\n    state = {\n        loading: true,\n        matchLines: [],\n        players: [],\n        rounds: [],\n        score: [],\n    };\n\n    calculateStats = () => {\n        console.log('calculateState');\n        this.setState({'loading': false})\n    }\n\n    processMatchLines = (data: string) => {\n        //this.setState({'matchLines': data});\n\n        var lines = data.split('\\n');\n\n        // Find last Match_Start.\n        var reversedLines = data.split('\\n').reverse().join('\\n');\n        var matchStartIndex = reversedLines.indexOf('Match_Start'); // => 18\n        var tempString = reversedLines.substring(0, matchStartIndex);\n        var MatchStartLineNumber = tempString.split('\\n').length;\n\n        // Loop through.\n        const matchLines : MatchLine[] = [];\n        let roundNumber = 0;\n\n        for (var line = 0; line < lines.length; line++) {\n            let currentLine = lines[line].substring(24);\n            let steamId = this.determineMatchLineSteamId(currentLine);\n            let isPlayer = steamId !== '';\n            let isWarmup = line < MatchStartLineNumber;\n            let type = this.determineMatchLineType(currentLine);;\n            let team = this.determineMatchLineTeam(currentLine);\n\n            if (type == 'round_end') {\n                roundNumber++;\n            }\n\n            let lineObject: MatchLine = {\n                'isPlayer': isPlayer,\n                'isWarmup': isWarmup,\n                'steamId': steamId,\n                'team': team,\n                'type': type,\n                'roundNumber': isWarmup ? 0 : roundNumber,\n                'raw': lines[line],\n            }\n\n            // this.setState((state) => ({\n            //     matchLines: [...state.matchLines, lineObject]\n            // }));\n\n            matchLines.push(lineObject);\n        }\n\n        this.setState({\n            matchLines: [...this.state.matchLines, ...matchLines]\n        });\n\n        console.log('process done');\n    }\n\n    determineMatchLineSteamId = (line: string) => {\n        let matches = line.match('STEAM_[^>]*');\n\n        if (!matches) {\n            return '';\n        }\n\n        var steamId = matches[0];\n\n        // const isKnownPlayer = this.state.players.find((player: any) => {\n        //     return player.steamId === steamId;\n        // });\n        //\n        // if (!isKnownPlayer) {\n        //     let newPlayer: Player = {\n        //         'steamId': steamId\n        //     };\n        //\n        //     this.setState(state => ({\n        //         players: [...state.players, newPlayer]\n        //     }));\n        // }\n\n        return steamId[0];\n    }\n\n    determineMatchLineTeam = (line: string) => {\n        if (line.match(/<CT>|<TERRORIST>/)) {\n            return line.includes('<CT>') ? 'CT' : 'T';\n        }\n\n        return '';\n    }\n\n    determineMatchLineType = (line: string) => {\n        if (line.match(/killed|attacked/)) {\n            return 'damage';\n        }\n        if (line.match(/Round_End/)) {\n            return 'round_end';\n        }\n        if (line.match(/Round_Start/)) {\n            return 'round_start';\n        }\n        if (line.match(/SFUI_Notice_Terrorists_Win/)) {\n            return 'round_win_t';\n        }\n        if (line.match(/SFUI_Notice_CTs_Win/)) {\n            return 'round_win_ct';\n        }\n\n        return 'meta';\n    }\n\n    processMatch() {\n        console.log('renderMatch');\n        const file = require(\"./matchdata/match.txt\");\n\n        fetch(file)\n            .then((response) => response.text())\n            .then((data) => {\n                this.processMatchLines(data);\n            });\n    }\n\n    componentDidMount() {\n        console.log('componentDidMount');\n        this.processMatch();\n    }\n\n    componentDidUpdate() {\n        console.log('componentDidUpdate');\n        this.calculateStats();\n    }\n\n    render() {\n        if (this.state.loading) {\n            return 'Loading...';\n        }\n        else {\n            return (\n                <div>kk</div>\n            );\n        }\n    }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}