{"ast":null,"code":"var _jsxFileName = \"/Users/jakobkruse/Code/blast/blast/src/App.tsx\";\nimport React from 'react';\nimport moment from 'moment';\n\n// import dayjs from 'dayjs'\n// import duration from 'dayjs/plugin/duration';\n// dayjs.extend(duration);\n//\n//\n//\n// var customParseFormat = require('dayjs/plugin/customParseFormat')\n// dayjs.extend(customParseFormat);\n// // var relativeTime = require('dayjs/plugin/relativeTime')\n// // dayjs.extend(relativeTime);\n\n// https://www.hltv.org/matches/2352820/natus-vincere-vs-vitality-blast-premier-fall-final-2021\n// https://chewedup.blast.tv/6544bb744b36dbf16919bd9b88528887b06a71c7de9e60e5102bba7c1cb9611c.html\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// interface MyState {\n//     matchLines: keyof MatchLine;\n// }\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      loading: true,\n      matchLines: [],\n      players: [],\n      rounds: [],\n      teams: [],\n      roundStats: []\n    };\n    this.renderStats = () => {\n      console.log(this.state);\n      this.setState({\n        'loading': false\n      });\n    };\n    this.calculateStats = () => {\n      const roundStatsCollection = [];\n      const playerStats = this.getDefaultPlayerStats();\n      const score = {};\n      const team1 = this.state.teams[0];\n      const team2 = this.state.teams[1];\n      score[team1.name] = 0;\n      score[team2.name] = 0;\n      this.state.rounds.forEach(round => {\n        var roundLines = this.state.matchLines.filter(line => line.roundNumber == round.number);\n        var roundTimes = roundLines.filter(line => {\n          return line.type == 'round_start' || line.type == 'round_end';\n        }).map(function (line) {\n          return line.raw.substring(0, 21);\n        });\n        var startTime = moment(roundTimes[0], 'MM/DD/YYYY - HH:mm:ss');\n        var endTime = moment(roundTimes[1], 'MM/DD/YYYY - HH:mm:ss');\n        var roundTime = moment(endTime.diff(startTime)).format(\"mm:ss\");\n        console.log(roundTimeSeconds);\n        let ct = '';\n        let t = '';\n        roundLines.filter(line => line.type == 'team_determination').forEach(line => {\n          const ctMatches = line.raw.match('(?<=\"CT\": ).([^:]*)$');\n          const tMatches = line.raw.match('(?<=\"TERRORIST\": ).([^:]*)$');\n          if (ctMatches && ctMatches.length !== 0) {\n            ct = ctMatches[0];\n          }\n          if (tMatches && tMatches.length !== 0) {\n            t = tMatches[0];\n          }\n        });\n        roundLines.forEach(line => {\n          if (line.type == 'round_win_t' || line.type == 'round_win_ct') {\n            var winningTeam = line.type.replace('round_win_', '');\n            if (winningTeam == 't') {\n              score[t]++;\n            }\n            if (winningTeam == 'ct') {\n              score[ct]++;\n            }\n          }\n          if (line.type == 'interaction') {\n            if (line.interactionData.kill) {\n              playerStats[line.steamId].kills++;\n              playerStats[line.interactionData.killed].deaths++;\n            }\n            if (line.interactionData.assist) {\n              playerStats[line.steamId].assists++;\n            }\n            playerStats[line.steamId].damage += Number(line.interactionData.damage);\n            playerStats[line.steamId].adr = playerStats[line.steamId].damage / round.number;\n            playerStats[line.steamId].kpr = playerStats[line.steamId].kills / round.number;\n            playerStats[line.steamId].dpr = playerStats[line.steamId].deaths / round.number;\n          }\n        });\n        let playerStatsRound = JSON.parse(JSON.stringify(playerStats));\n        let roundStats = {\n          'roundNumber': round.number,\n          'score': {\n            ...score\n          },\n          'playerStats': {\n            ...playerStatsRound\n          },\n          'roundTime': roundTimeSeconds\n        };\n        roundStatsCollection.push(roundStats);\n      });\n      this.setState({\n        roundStats: roundStatsCollection\n      }, this.renderStats);\n    };\n    this.getDefaultPlayerStats = () => {\n      const stats = {};\n      this.state.players.forEach(player => {\n        var playerStats = {\n          'player': player,\n          'kills': 0,\n          'deaths': 0,\n          'damage': 0,\n          'assists': 0\n        };\n        stats[player.steamId] = playerStats;\n      });\n      return stats;\n    };\n    this.setPlayersAndTeams = () => {\n      const players = [];\n      this.state.matchLines.filter(line => {\n        return line.isPlayer && !line.isWarmup && line.type == 'interaction';\n      }).forEach(line => {\n        const isKnownPlayer = players.find(player => {\n          return player.steamId === line.steamId;\n        });\n        if (!isKnownPlayer) {\n          const aliasMatches = line.raw.match('(?<=\\\\\")[^<]*');\n          const newPlayer = {\n            'steamId': line.steamId,\n            'alias': aliasMatches[0]\n          };\n          players.push(newPlayer);\n        }\n      });\n      const teams = [];\n      this.state.matchLines.filter(line => {\n        return line.type == 'team_determination';\n      }).forEach(line => {\n        const matches = line.raw.match('([^:]*)$');\n        const teamName = matches[0].trim();\n        const isKnownTeam = teams.find(team => {\n          return team.name === teamName;\n        });\n        if (!isKnownTeam) {\n          const newTeam = {\n            'name': teamName\n          };\n          teams.push(newTeam);\n        }\n      });\n      this.setState({\n        players: players,\n        teams: teams\n      }, this.calculateStats);\n    };\n    this.processMatchLines = data => {\n      var lines = data.split('\\n');\n\n      // Find last Match_Start.\n      var reversedLines = data.split('\\n').reverse().join('\\n');\n      var matchStartIndex = reversedLines.indexOf('Match_Start');\n      var tempString = reversedLines.substring(0, matchStartIndex);\n      var MatchStartLineNumber = lines.length - tempString.split('\\n').length;\n      const matchLines = [];\n      const rounds = [];\n      let roundNumber = 1;\n      for (var line = 0; line < lines.length; line++) {\n        let currentLine = lines[line].substring(24);\n        let steamId = this.determineMatchLineSteamId(currentLine);\n        let isPlayer = steamId !== '';\n        let isWarmup = line < MatchStartLineNumber;\n        let type = this.determineMatchLineType(currentLine);\n        let interactionData = this.getInteractionData(currentLine);\n        let team = this.determineMatchLineTeam(currentLine);\n        let lineObject = {\n          'isPlayer': isPlayer,\n          'isWarmup': isWarmup,\n          'steamId': steamId,\n          'team': team,\n          'type': type,\n          'interactionData': interactionData,\n          'roundNumber': isWarmup ? 0 : roundNumber,\n          'raw': lines[line]\n        };\n        if (!isWarmup && type == 'round_end') {\n          let newRound = {\n            'number': roundNumber\n          };\n          rounds.push(newRound);\n          roundNumber++;\n        }\n        matchLines.push(lineObject);\n      }\n      this.setState({\n        matchLines: [...this.state.matchLines, ...matchLines],\n        rounds: [...this.state.rounds, ...rounds]\n      }, this.setPlayersAndTeams);\n      console.log('process done');\n    };\n    this.getInteractionData = line => {\n      let damageMatches = line.match('(?<=\\\\(damage \")[^\"]*');\n      let killMatches = line.match('^(?!.*(other)).*killed.*$');\n      let isKill = false;\n      let killed = '';\n      if (killMatches && killMatches.length != 0) {\n        isKill = true;\n        let killedSteamId = line.match('STEAM_[^>]*(?!.*STEAM_)');\n        if (killedSteamId && killedSteamId.length != 0) {\n          killed = killedSteamId[0];\n        }\n      }\n      let assistMatches = line.match('^(?!.*(flash-)).*assisted killing.*$');\n      let isAssist = false;\n      if (assistMatches && assistMatches.length != 0) {\n        isAssist = true;\n      }\n      let interaction = {\n        'damage': damageMatches ? Number(damageMatches[0]) : 0,\n        'kill': isKill,\n        'assist': isAssist,\n        'killed': killed\n      };\n      return interaction;\n    };\n    this.determineMatchLineSteamId = line => {\n      let matches = line.match('STEAM_[^>]*');\n      if (!matches) {\n        return '';\n      }\n      return matches[0];\n    };\n    this.determineMatchLineTeam = line => {\n      if (line.match(/<CT>|<TERRORIST>/)) {\n        return line.includes('<CT>') ? 'CT' : 'T';\n      }\n      return '';\n    };\n    this.determineMatchLineType = line => {\n      if (line.match(/killed|attacked|assisted killing/)) {\n        return 'interaction';\n      }\n      if (line.match(/Round_End/)) {\n        return 'round_end';\n      }\n      if (line.match(/Round_Start/)) {\n        return 'round_start';\n      }\n      if (line.match(/SFUI_Notice_Terrorists_Win|SFUI_Notice_Target_Bombed/)) {\n        return 'round_win_t';\n      }\n      if (line.match(/SFUI_Notice_CTs_Win|SFUI_Notice_Bomb_Defused/)) {\n        return 'round_win_ct';\n      }\n      if (line.match(/Team playing/)) {\n        return 'team_determination';\n      }\n      return 'meta';\n    };\n  }\n  componentDidMount() {\n    const file = require(\"./matchdata/match.txt\");\n    fetch(file).then(response => response.text()).then(data => {\n      this.processMatchLines(data);\n    });\n  }\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box has-text-centered\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification is-info\",\n          children: \"Loading ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          children: this.state.roundStats.map(function (roundStats) {\n            const scores = [];\n            const playerStats = [];\n            Object.entries(roundStats.score).map(_ref => {\n              let [team, wins] = _ref;\n              scores.push(`${team}: ${wins}`);\n            });\n            Object.entries(roundStats.playerStats).map(_ref2 => {\n              let [steamId, stats] = _ref2;\n              playerStats.push(stats);\n            });\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"box\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"title is-4\",\n                children: [\"Round: \", roundStats.roundNumber, \" \", roundStats.roundTime, \" \", moment.duration(roundStats.roundTime, 'seconds').asSeconds()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 33\n              }, this), scores.map((score, i) => /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"subtitle\",\n                children: score\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 60\n              }, this)), /*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"table is-striped is-hoverable is-narrow\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 420,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: \"Kills\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 421,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: \"Deaths\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 422,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: \"Assists\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 423,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: \"ADR\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 424,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: \"KPR\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 425,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: \"DPR\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 426,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 419,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 418,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: playerStats.map(function (playerStats, key) {\n                    var _playerStats$adr$toFi, _playerStats$adr, _playerStats$kpr$toFi, _playerStats$kpr, _playerStats$dpr$toFi, _playerStats$dpr;\n                    return /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: playerStats.player.alias\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 432,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: playerStats.kills\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 433,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: playerStats.deaths\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 434,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: playerStats.assists\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 435,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: (_playerStats$adr$toFi = (_playerStats$adr = playerStats.adr) === null || _playerStats$adr === void 0 ? void 0 : _playerStats$adr.toFixed(2)) !== null && _playerStats$adr$toFi !== void 0 ? _playerStats$adr$toFi : 0\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 436,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: (_playerStats$kpr$toFi = (_playerStats$kpr = playerStats.kpr) === null || _playerStats$kpr === void 0 ? void 0 : _playerStats$kpr.toFixed(2)) !== null && _playerStats$kpr$toFi !== void 0 ? _playerStats$kpr$toFi : 0\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 437,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: (_playerStats$dpr$toFi = (_playerStats$dpr = playerStats.dpr) === null || _playerStats$dpr === void 0 ? void 0 : _playerStats$dpr.toFixed(2)) !== null && _playerStats$dpr$toFi !== void 0 ? _playerStats$dpr$toFi : 0\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 438,\n                        columnNumber: 49\n                      }, this)]\n                    }, key, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 431,\n                      columnNumber: 52\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 429,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 33\n              }, this)]\n            }, roundStats.roundNumber, true, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\nexport default App;","map":{"version":3,"names":["React","moment","App","Component","state","loading","matchLines","players","rounds","teams","roundStats","renderStats","console","log","setState","calculateStats","roundStatsCollection","playerStats","getDefaultPlayerStats","score","team1","team2","name","forEach","round","roundLines","filter","line","roundNumber","number","roundTimes","type","map","raw","substring","startTime","endTime","roundTime","diff","format","roundTimeSeconds","ct","t","ctMatches","match","tMatches","length","winningTeam","replace","interactionData","kill","steamId","kills","killed","deaths","assist","assists","damage","Number","adr","kpr","dpr","playerStatsRound","JSON","parse","stringify","push","stats","player","setPlayersAndTeams","isPlayer","isWarmup","isKnownPlayer","find","aliasMatches","newPlayer","matches","teamName","trim","isKnownTeam","team","newTeam","processMatchLines","data","lines","split","reversedLines","reverse","join","matchStartIndex","indexOf","tempString","MatchStartLineNumber","currentLine","determineMatchLineSteamId","determineMatchLineType","getInteractionData","determineMatchLineTeam","lineObject","newRound","damageMatches","killMatches","isKill","killedSteamId","assistMatches","isAssist","interaction","includes","componentDidMount","file","require","fetch","then","response","text","render","scores","Object","entries","wins","duration","asSeconds","i","key","alias","toFixed"],"sources":["/Users/jakobkruse/Code/blast/blast/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport moment from 'moment';\n\n// import dayjs from 'dayjs'\n// import duration from 'dayjs/plugin/duration';\n// dayjs.extend(duration);\n//\n//\n//\n// var customParseFormat = require('dayjs/plugin/customParseFormat')\n// dayjs.extend(customParseFormat);\n// // var relativeTime = require('dayjs/plugin/relativeTime')\n// // dayjs.extend(relativeTime);\n\n// https://www.hltv.org/matches/2352820/natus-vincere-vs-vitality-blast-premier-fall-final-2021\n// https://chewedup.blast.tv/6544bb744b36dbf16919bd9b88528887b06a71c7de9e60e5102bba7c1cb9611c.html\n\ninterface MatchLine {\n    isPlayer: boolean;\n    isWarmup: boolean;\n    steamId: string;\n    team: string;\n    type: string;\n    interactionData: InteractionData;\n    roundNumber: number;\n    raw: string;\n}\n\ninterface InteractionData {\n    damage: number;\n    kill: boolean;\n    assist: boolean;\n    killed: string;\n}\n\ninterface Player {\n    steamId: string;\n    alias: string;\n}\n\ninterface Team {\n    name: string;\n}\n\ninterface Round {\n    number: number;\n}\n\ninterface PlayerStats {\n    player: Player;\n    kills: number;\n    deaths: number;\n    assists: number;\n    damage: number;\n    adr?: number;\n    kpr?: number;\n    dpr?: number;\n}\n\ninterface RoundStats {\n    roundNumber: number;\n    score: {},\n    playerStats?: any;\n    roundTime: number;\n}\n\ninterface State {\n    loading: boolean;\n    players: Player[];\n    teams: Team[];\n    rounds: Round[];\n    roundStats: RoundStats[];\n    matchLines: MatchLine[];\n}\n// interface MyState {\n//     matchLines: keyof MatchLine;\n// }\n\nclass App extends React.Component <any, State> {\n    state = {\n        loading: true,\n        matchLines: [],\n        players: [],\n        rounds: [],\n        teams: [],\n        roundStats: [],\n    };\n\n    renderStats = () => {\n        console.log(this.state);\n        this.setState({'loading': false});\n    }\n\n    calculateStats = () => {\n        const roundStatsCollection : RoundStats[] = [];\n        const playerStats = this.getDefaultPlayerStats();\n        const score: {[key: string]: number} = {}\n        const team1 : Team = this.state.teams[0];\n        const team2 : Team = this.state.teams[1];\n\n        score[team1.name] = 0;\n        score[team2.name] = 0;\n\n        this.state.rounds.forEach((round: Round) => {\n            var roundLines : MatchLine[] = this.state.matchLines\n                .filter((line: MatchLine) => line.roundNumber == round.number);\n\n            var roundTimes = roundLines.filter((line: MatchLine) => {\n                return line.type == 'round_start' || line.type == 'round_end' ;\n            }).map(function(line: MatchLine) {\n                return line.raw.substring(0,21);\n            });\n\n            var startTime = moment(roundTimes[0], 'MM/DD/YYYY - HH:mm:ss');\n            var endTime = moment(roundTimes[1], 'MM/DD/YYYY - HH:mm:ss');\n            var roundTime = moment(endTime.diff(startTime)).format(\"mm:ss\");\n            console.log(roundTimeSeconds);\n\n            let ct = '';\n            let t = '';\n\n            roundLines.filter((line: MatchLine) => line.type == 'team_determination')\n                .forEach((line: MatchLine) => {\n\n                    const ctMatches = line.raw.match('(?<=\"CT\": ).([^:]*)$');\n                    const tMatches = line.raw.match('(?<=\"TERRORIST\": ).([^:]*)$');\n\n                    if (ctMatches && ctMatches.length !== 0) {\n                        ct = ctMatches![0]\n                    }\n                    if (tMatches && tMatches.length !== 0) {\n                        t = tMatches![0]\n                    }\n                });\n\n            roundLines.forEach((line: MatchLine) => {\n                    if (line.type == 'round_win_t' || line.type == 'round_win_ct') {\n                        var winningTeam = line.type.replace('round_win_', '');\n\n                        if (winningTeam == 't') {\n                            score[t]++;\n                        }\n                        if (winningTeam == 'ct') {\n                            score[ct]++;\n                        }\n                    }\n\n                    if (line.type == 'interaction') {\n                        if (line.interactionData.kill) {\n                            playerStats[line.steamId].kills++;\n                            playerStats[line.interactionData.killed].deaths++;\n                        }\n                        if (line.interactionData.assist) {\n                            playerStats[line.steamId].assists++;\n                        }\n                        playerStats[line.steamId].damage += Number(line.interactionData.damage);\n                        playerStats[line.steamId].adr = playerStats[line.steamId].damage / round.number;\n                        playerStats[line.steamId].kpr = playerStats[line.steamId].kills / round.number;\n                        playerStats[line.steamId].dpr = playerStats[line.steamId].deaths / round.number;\n                    }\n                });\n\n            let playerStatsRound = JSON.parse(JSON.stringify(playerStats));\n\n            let roundStats: RoundStats = {\n                'roundNumber': round.number,\n                'score': {...score},\n                'playerStats': {...playerStatsRound},\n                'roundTime': roundTimeSeconds,\n            };\n\n            roundStatsCollection.push(roundStats);\n        });\n\n        this.setState({\n            roundStats: roundStatsCollection\n        }, this.renderStats);\n    }\n\n    getDefaultPlayerStats = () => {\n        const stats: {[key: string]: PlayerStats} = {};\n\n        this.state.players.forEach((player: Player) => {\n            var playerStats: PlayerStats = {\n                'player': player,\n                'kills': 0,\n                'deaths': 0,\n                'damage': 0,\n                'assists': 0,\n            };\n\n            stats[player.steamId] = playerStats;\n        });\n\n        return stats;\n    }\n\n    setPlayersAndTeams = () => {\n        const players : Player[] = [];\n\n        this.state.matchLines\n            .filter((line: MatchLine) => {\n                return line.isPlayer && !line.isWarmup && line.type == 'interaction';\n            })\n            .forEach((line: MatchLine) => {\n                const isKnownPlayer = players.find((player: Player) => {\n                    return player.steamId === line.steamId;\n                });\n\n                if (!isKnownPlayer) {\n                    const aliasMatches = line.raw.match('(?<=\\\\\")[^<]*');\n                    const newPlayer: Player = {\n                        'steamId': line.steamId,\n                        'alias': aliasMatches![0]\n                    };\n\n                    players.push(newPlayer);\n                }\n            });\n\n        const teams : Team[] = [];\n\n        this.state.matchLines\n            .filter((line: MatchLine) => {\n                return line.type == 'team_determination';\n            })\n            .forEach((line: MatchLine) => {\n                const matches = line.raw.match('([^:]*)$');\n                const teamName = matches![0].trim();\n\n                const isKnownTeam = teams.find((team: Team) => {\n                    return team.name === teamName;\n                });\n\n                if (!isKnownTeam) {\n                    const newTeam: Team = {\n                        'name': teamName\n                    };\n\n                    teams.push(newTeam);\n                }\n            });\n\n        this.setState({\n            players: players,\n            teams: teams,\n        }, this.calculateStats);\n    }\n\n    processMatchLines = (data: string) => {\n        var lines = data.split('\\n');\n\n        // Find last Match_Start.\n        var reversedLines = data.split('\\n').reverse().join('\\n');\n        var matchStartIndex = reversedLines.indexOf('Match_Start');\n        var tempString = reversedLines.substring(0, matchStartIndex);\n        var MatchStartLineNumber = lines.length - tempString.split('\\n').length;\n\n        const matchLines : MatchLine[] = [];\n        const rounds : Round[] = [];\n        let roundNumber = 1;\n\n        for (var line = 0; line < lines.length; line++) {\n            let currentLine = lines[line].substring(24);\n            let steamId = this.determineMatchLineSteamId(currentLine);\n            let isPlayer = steamId !== '';\n            let isWarmup = line < MatchStartLineNumber;\n            let type = this.determineMatchLineType(currentLine);\n            let interactionData = this.getInteractionData(currentLine);\n            let team = this.determineMatchLineTeam(currentLine);\n\n            let lineObject: MatchLine = {\n                'isPlayer': isPlayer,\n                'isWarmup': isWarmup,\n                'steamId': steamId,\n                'team': team,\n                'type': type,\n                'interactionData': interactionData,\n                'roundNumber': isWarmup ? 0 : roundNumber,\n                'raw': lines[line],\n            }\n\n            if (!isWarmup && type == 'round_end') {\n                let newRound: Round = {\n                    'number': roundNumber,\n                };\n                rounds.push(newRound);\n\n                roundNumber++;\n            }\n\n            matchLines.push(lineObject);\n        }\n\n        this.setState({\n            matchLines: [...this.state.matchLines, ...matchLines],\n            rounds: [...this.state.rounds, ...rounds]\n        }, this.setPlayersAndTeams);\n\n        console.log('process done');\n    }\n\n    getInteractionData = (line: string) => {\n        let damageMatches = line.match('(?<=\\\\(damage \")[^\"]*');\n        let killMatches = line.match('^(?!.*(other)).*killed.*$');\n        let isKill = false;\n        let killed = '';\n\n        if (killMatches && killMatches.length != 0) {\n            isKill = true;\n\n            let killedSteamId = line.match('STEAM_[^>]*(?!.*STEAM_)');\n\n            if (killedSteamId && killedSteamId.length != 0) {\n                killed = killedSteamId[0];\n            }\n        }\n\n        let assistMatches = line.match('^(?!.*(flash-)).*assisted killing.*$');\n        let isAssist = false;\n\n        if (assistMatches && assistMatches.length != 0) {\n            isAssist = true;\n        }\n\n        let interaction: InteractionData = {\n            'damage': damageMatches ? Number(damageMatches[0]) : 0,\n            'kill': isKill,\n            'assist': isAssist,\n            'killed': killed,\n        }\n\n        return interaction;\n    }\n\n    determineMatchLineSteamId = (line: string) => {\n        let matches = line.match('STEAM_[^>]*');\n\n        if (!matches) {\n            return '';\n        }\n\n        return matches[0];\n    }\n\n    determineMatchLineTeam = (line: string) => {\n        if (line.match(/<CT>|<TERRORIST>/)) {\n            return line.includes('<CT>') ? 'CT' : 'T';\n        }\n\n        return '';\n    }\n\n    determineMatchLineType = (line: string) => {\n        if (line.match(/killed|attacked|assisted killing/)) {\n            return 'interaction';\n        }\n        if (line.match(/Round_End/)) {\n            return 'round_end';\n        }\n        if (line.match(/Round_Start/)) {\n            return 'round_start';\n        }\n        if (line.match(/SFUI_Notice_Terrorists_Win|SFUI_Notice_Target_Bombed/)) {\n            return 'round_win_t';\n        }\n        if (line.match(/SFUI_Notice_CTs_Win|SFUI_Notice_Bomb_Defused/)) {\n            return 'round_win_ct';\n        }\n        if (line.match(/Team playing/)) {\n            return 'team_determination';\n        }\n\n        return 'meta';\n    }\n\n    componentDidMount() {\n        const file = require(\"./matchdata/match.txt\");\n\n        fetch(file)\n            .then((response) => response.text())\n            .then((data) => {\n                this.processMatchLines(data);\n            });\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className=\"box has-text-centered\">\n                    <div className=\"notification is-info\">\n                        Loading ...\n                    </div>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className=\"container\">\n                    <div className=\"box\">\n                        { this.state.roundStats.map(function(roundStats: RoundStats) {\n                            const scores : any[] = [];\n                            const playerStats : any[] = [];\n\n                            Object.entries(roundStats.score).map(([team, wins]) => {\n                                scores.push(`${team}: ${wins}`);\n                            });\n\n                            Object.entries(roundStats.playerStats).map(([steamId, stats]) => {\n                                playerStats.push(stats);\n                            });\n\n                            return <div className=\"box\" key={roundStats.roundNumber}>\n                                <h4 className=\"title is-4\">Round: {roundStats.roundNumber} {roundStats.roundTime} { moment.duration(roundStats.roundTime, 'seconds').asSeconds() }</h4>\n                                { scores.map((score, i) => <h2 key={i} className=\"subtitle\">{score}</h2>) }\n\n                                <table className=\"table is-striped is-hoverable is-narrow\">\n                                    <thead>\n                                        <tr>\n                                            <td></td>\n                                            <td>Kills</td>\n                                            <td>Deaths</td>\n                                            <td>Assists</td>\n                                            <td>ADR</td>\n                                            <td>KPR</td>\n                                            <td>DPR</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        { playerStats.map(function(playerStats: PlayerStats, key) {\n                                            return <tr key={key}>\n                                                <td>{playerStats.player.alias}</td>\n                                                <td>{playerStats.kills}</td>\n                                                <td>{playerStats.deaths}</td>\n                                                <td>{playerStats.assists}</td>\n                                                <td>{playerStats.adr?.toFixed(2) ?? 0}</td>\n                                                <td>{playerStats.kpr?.toFixed(2) ?? 0}</td>\n                                                <td>{playerStats.dpr?.toFixed(2) ?? 0}</td>\n                                            </tr>\n                                        })}\n                                    </tbody>\n                                </table>\n                            </div>\n                        })}\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}