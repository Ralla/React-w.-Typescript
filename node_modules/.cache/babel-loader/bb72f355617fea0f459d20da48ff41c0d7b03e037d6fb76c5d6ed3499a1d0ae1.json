{"ast":null,"code":"import React from 'react';\n// interface MyState {\n//     matchLines: keyof MatchLine;\n// }\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      // loading: false,\n      matchLines: [],\n      players: []\n    };\n    this.processMatchLines = data => {\n      //this.setState({'matchLines': data});\n\n      var lines = data.split('\\n');\n\n      // Find last Match_Start.\n      var reversedLines = data.split('\\n').reverse().join('\\n');\n      var matchStartIndex = reversedLines.indexOf('Match_Start'); // => 18\n      var tempString = reversedLines.substring(0, matchStartIndex);\n      var MatchStartLineNumber = tempString.split('\\n').length;\n\n      // Loop through.\n      const matchLines = [];\n      for (var line = 0; line < lines.length; line++) {\n        let currentLine = lines[line].substring(24);\n        let steamId = this.determineMatchLineSteamId(currentLine);\n        let isPlayer = steamId !== '';\n        let isWarmup = line < MatchStartLineNumber;\n        let type = this.determineMatchLineType(currentLine);\n        ;\n        let team = this.determineMatchLineTeam(currentLine);\n        let lineObject = {\n          'isPlayer': isPlayer,\n          'isWarmup': isWarmup,\n          'steamId': steamId,\n          'team': team,\n          'type': type,\n          'raw': lines[line]\n        };\n        matchLines.push(lineObject);\n      }\n      console.log(matchLines);\n      this.setState({\n        'matchLines': matchLines\n      });\n    };\n    this.determineMatchLineSteamId = line => {\n      let steamId = line.match('STEAM_[^>]*');\n      if (steamId) {\n        return steamId[0];\n      }\n      return '';\n    };\n    this.determineMatchLineTeam = line => {\n      if (line.match(/<CT>|<TERRORIST>/)) {\n        return line.includes('<CT>') ? 'CT' : 'T';\n      }\n      return '';\n    };\n    this.determineMatchLineType = line => {\n      if (line.match(/killed|attacked/)) {\n        return 'damage';\n      }\n      if (line.match(/Round_End/)) {\n        return 'round_end';\n      }\n      return 'meta';\n    };\n  }\n  processMatch() {\n    console.log('renderMatch');\n    const file = require(\"./matchdata/match.txt\");\n    fetch(file).then(response => response.text()).then(data => {\n      this.processMatchLines(data);\n    });\n  }\n  componentDidMount() {\n    this.processMatch();\n  }\n  render() {\n    return 'kk';\n  }\n}\nexport default App;","map":{"version":3,"names":["React","App","Component","state","matchLines","players","processMatchLines","data","lines","split","reversedLines","reverse","join","matchStartIndex","indexOf","tempString","substring","MatchStartLineNumber","length","line","currentLine","steamId","determineMatchLineSteamId","isPlayer","isWarmup","type","determineMatchLineType","team","determineMatchLineTeam","lineObject","push","console","log","setState","match","includes","processMatch","file","require","fetch","then","response","text","componentDidMount","render"],"sources":["/Users/jakobkruse/Code/blast/blast/src/App.tsx"],"sourcesContent":["import React from 'react';\n\ninterface MatchLine {\n    isPlayer: boolean;\n    isWarmup: boolean;\n    steamId: string;\n    team: string;\n    type: string;\n    raw: string;\n}\n\n// interface MyState {\n//     matchLines: keyof MatchLine;\n// }\n\nclass App extends React.Component {\n// class App extends React.Component {\n//     constructor(props: any) {\n//         super(props);\n//\n//         this.state = {\n//             loading: true,\n//             matchLines: ''\n//         };\n//     }\n    state = {\n        // loading: false,\n        matchLines: [],\n        players: [],\n    };\n\n    // loading = (loading: boolean) => {\n    //     this.setState({'loading': loading});\n    //     console.log(this.state);\n    // }\n\n    processMatchLines = (data: string) => {\n        //this.setState({'matchLines': data});\n\n        var lines = data.split('\\n');\n\n        // Find last Match_Start.\n        var reversedLines = data.split('\\n').reverse().join('\\n');\n        var matchStartIndex = reversedLines.indexOf('Match_Start'); // => 18\n        var tempString = reversedLines.substring(0, matchStartIndex);\n        var MatchStartLineNumber = tempString.split('\\n').length;\n\n        // Loop through.\n        const matchLines : MatchLine[] = [];\n\n        for (var line = 0; line < lines.length; line++) {\n            let currentLine = lines[line].substring(24);\n            let steamId = this.determineMatchLineSteamId(currentLine);\n            let isPlayer = steamId !== '';\n            let isWarmup = line < MatchStartLineNumber;\n            let type = this.determineMatchLineType(currentLine);;\n            let team = this.determineMatchLineTeam(currentLine);\n\n            let lineObject: MatchLine = {\n                'isPlayer': isPlayer,\n                'isWarmup': isWarmup,\n                'steamId': steamId,\n                'team': team,\n                'type': type,\n                'raw': lines[line],\n            }\n\n            matchLines.push(lineObject);\n        }\n\n        console.log(matchLines);\n        this.setState({ 'matchLines': matchLines});\n    }\n\n    determineMatchLineSteamId = (line: string) => {\n        let steamId = line.match('STEAM_[^>]*');\n\n        if (steamId) {\n            return steamId[0]\n        }\n\n        return '';\n    }\n\n    determineMatchLineTeam = (line: string) => {\n        if (line.match(/<CT>|<TERRORIST>/)) {\n            return line.includes('<CT>') ? 'CT' : 'T';\n        }\n\n        return '';\n    }\n\n    determineMatchLineType = (line: string) => {\n        if (line.match(/killed|attacked/)) {\n            return 'damage';\n        }\n        if (line.match(/Round_End/)) {\n            return 'round_end';\n        }\n\n        return 'meta';\n    }\n\n    processMatch() {\n        console.log('renderMatch');\n        const file = require(\"./matchdata/match.txt\");\n\n        fetch(file)\n            .then((response) => response.text())\n            .then((data) => {\n                this.processMatchLines(data);\n            });\n    }\n\n    componentDidMount() {\n        this.processMatch();\n    }\n\n    render() {\n        return (\n            'kk'\n        );\n    }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}